eyJhbGciOiJIUzI1NiJ9.pipeline:

  web_tests_then_build_dist:
    image: quay.io/ukhomeofficedigital/nodejs-base:v6.9.1
    commands:
      - yum install -y git bzip2 bzip2-libs fontconfig
      - git config --global url."https://".insteadOf git://
      - npm install -g yarn@0.27.5
      - cd platform-hub-web
      - rm -rf node_modules
      - yarn
      - yarn run test
      - yarn run build
    when:
      event: [pull_request, tag]

  # Expects the optimized dist code to have been built
  web_build_image:
    image: docker:1.12
    environment:
      - DOCKER_HOST=tcp://127.0.0.1:2375
    commands:
      - cd platform-hub-web
      - docker build -t platform-hub-web .
    when:
      event: [pull_request, tag]

  web_test_image:
    image: docker:1.12
    environment:
      - DOCKER_HOST=tcp://127.0.0.1:2375
    commands:
      - docker run --name platform-hub-web-test platform-hub-web /bin/sh -c "pwd && ls -lah && test -e index.html"
    when:
      event: [pull_request, tag]

  web_latest_image_to_quay:
    image: docker:1.12
    environment:
      - DOCKER_HOST=tcp://127.0.0.1:2375
    commands:
      - docker login -u="ukhomeofficedigital+platform_hub" -p=${DOCKER_PASSWORD} quay.io
      - docker tag platform-hub-web quay.io/ukhomeofficedigital/platform-hub-web:latest
      - docker tag platform-hub-web quay.io/ukhomeofficedigital/platform-hub-web:${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/platform-hub-web:latest
      - docker push quay.io/ukhomeofficedigital/platform-hub-web:${DRONE_COMMIT_SHA}
    when:
      event: pull_request
      branch: master

  web_tag_image_to_quay:
    image: docker:1.12
    environment:
      - DOCKER_HOST=tcp://127.0.0.1:2375
    commands:
      - docker login -u="ukhomeofficedigital+platform_hub" -p=${DOCKER_PASSWORD} quay.io
      - docker tag platform-hub-web quay.io/ukhomeofficedigital/platform-hub-web:${DRONE_TAG}
      - docker push quay.io/ukhomeofficedigital/platform-hub-web:${DRONE_TAG}
    when:
      event: tag


  api_tests:
    image: alpine:3.5
    environment:
      - SECRET_KEY_BASE=$(head -c30 < /dev/urandom | base64)
      - GITHUB_CLIENT_ID=NA
      - GITHUB_CLIENT_SECRET=NA
      - AGENT_GITHUB_TOKEN=noop
      - AGENT_GITHUB_ORG=noop
      - AGENT_GITHUB_ORG_MAIN_TEAM_ID=noop
      - AGENT_KEYCLOAK_CLIENT_ID=noop
      - AGENT_KEYCLOAK_CLIENT_SECRET=noop
      - AGENT_KEYCLOAK_USERNAME=noop
      - AGENT_KEYCLOAK_PASSWORD=noop
      - AGENT_KEYCLOAK_BASE_URL=noop
      - AGENT_KEYCLOAK_REALM=noop
      - APP_BASE_URL="http://localhost:3000"
      - EMAIL_FROM_ADDRESS="test@example.org"
      - EMAIL_MAX_TO_ADDRESSES=10
      - SLACK_WEBHOOK=noop
    commands:
      - apk update && apk upgrade
      - apk --update add ca-certificates openssl
      - update-ca-certificates
      - apk --update add bash ruby ruby-irb ruby-rake ruby-io-console ruby-json ruby-bigdecimal libstdc++ tzdata postgresql-client
      - apk --update add build-base ruby-dev libc-dev postgresql-dev libxml2-dev libxslt-dev libffi-dev
      - "echo 'gem: --no-document' > /etc/gemrc && gem install bundler -v 1.14.6"
      - cd platform-hub-api
      - "/bin/bash -c 'bundle install --jobs 20 --retry 5 --deployment --no-cache'"
      - "/bin/bash -c 'bin/setup && bundle exec rspec'"
    when:
      event: [pull_request, tag]

  api_build_image:
    image: docker:1.12
    environment:
      - DOCKER_HOST=tcp://127.0.0.1:2375
    commands:
      - cd platform-hub-api
      - docker build -t platform-hub-api .
    when:
      event: [pull_request, tag]

  api_test_image:
    image: docker:1.12
    environment:
      - DOCKER_HOST=tcp://127.0.0.1:2375
    commands:
      - >
        docker run
        --name platform-hub-api-test
        -e PORT=30000
        -e PHUB_DB_NAME=phub_development
        -e PHUB_DB_USERNAME=phub
        -e PHUB_DB_PASSWORD=phub_password
        -e RAILS_LOG_TO_STDOUT=true
        -e SECRET_KEY_BASE=$(head -c30 < /dev/urandom | base64)
        -e GITHUB_CLIENT_ID=NA
        -e GITHUB_CLIENT_SECRET=NA
        -e AGENT_GITHUB_TOKEN=noop
        -e AGENT_GITHUB_ORG=noop
        -e AGENT_GITHUB_ORG_MAIN_TEAM_ID=noop
        -e AGENT_KEYCLOAK_CLIENT_ID=noop
        -e AGENT_KEYCLOAK_CLIENT_SECRET=noop
        -e AGENT_KEYCLOAK_USERNAME=noop
        -e AGENT_KEYCLOAK_PASSWORD=noop
        -e AGENT_KEYCLOAK_BASE_URL=noop
        -e AGENT_KEYCLOAK_REALM=noop
        -e APP_BASE_URL="http://localhost:3000"
        -e EMAIL_FROM_ADDRESS="test@example.org"
        -e EMAIL_MAX_TO_ADDRESSES=10
        -e SLACK_WEBHOOK=noop
        --net=host
        -d
        platform-hub-api
        bin/rails server
      - sleep 5
      - curl -s -f http://127.0.0.1:30000/healthz
    when:
      event: [pull_request, tag]

  api_latest_image_to_quay:
    image: docker:1.12
    environment:
      - DOCKER_HOST=tcp://127.0.0.1:2375
    commands:
      - docker login -u="ukhomeofficedigital+platform_hub" -p=${DOCKER_PASSWORD} quay.io
      - docker tag platform-hub-api quay.io/ukhomeofficedigital/platform-hub-api:latest
      - docker tag platform-hub-api quay.io/ukhomeofficedigital/platform-hub-api:${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/platform-hub-api:latest
      - docker push quay.io/ukhomeofficedigital/platform-hub-api:${DRONE_COMMIT_SHA}
    when:
      event: pull_request
      branch: master

  api_tag_image_to_quay:
    image: docker:1.12
    environment:
      - DOCKER_HOST=tcp://127.0.0.1:2375
    commands:
      - docker login -u="ukhomeofficedigital+platform_hub" -p=${DOCKER_PASSWORD} quay.io
      - docker tag platform-hub-api quay.io/ukhomeofficedigital/platform-hub-api:${DRONE_TAG}
      - docker push quay.io/ukhomeofficedigital/platform-hub-api:${DRONE_TAG}
    when:
      event: tag

services:

  dind:
    image: docker:1.12-dind
    privileged: true
    command:
      - "-s"
      - "overlay"
    when:
      event: pull_request

  postgres:
    image: postgres:9.6.1
    environment:
      - POSTGRES_USER=phub
      - POSTGRES_PASSWORD=phub_password
    when:
      event: pull_request
.sjwXnqu72-f4JBfSkCgS0ff-5owVryjGck2tMZMwn9w