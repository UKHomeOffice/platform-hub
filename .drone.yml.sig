eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIHdlYl90ZXN0c190aGVuX2J1aWxkX2Rpc3Q6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL25vZGVqcy1iYXNlOnY2LjkuMQogICAgY29tbWFuZHM6CiAgICAgIC0geXVtIGluc3RhbGwgLXkgZ2l0IGJ6aXAyIGJ6aXAyLWxpYnMgZm9udGNvbmZpZwogICAgICAtIGdpdCBjb25maWcgLS1nbG9iYWwgdXJsLiJodHRwczovLyIuaW5zdGVhZE9mIGdpdDovLwogICAgICAtIG5wbSBpbnN0YWxsIC1nIHlhcm5AMC4yNy41CiAgICAgIC0gY2QgcGxhdGZvcm0taHViLXdlYgogICAgICAtIHJtIC1yZiBub2RlX21vZHVsZXMKICAgICAgLSB5YXJuCiAgICAgIC0geWFybiBydW4gdGVzdAogICAgICAtIHlhcm4gcnVuIGJ1aWxkCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZywgcHVsbF9yZXF1ZXN0XQoKICAjIEV4cGVjdHMgdGhlIG9wdGltaXplZCBkaXN0IGNvZGUgdG8gaGF2ZSBiZWVuIGJ1aWx0CiAgd2ViX2J1aWxkX2ltYWdlOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgcGxhdGZvcm0taHViLXdlYgogICAgICAtIGRvY2tlciBidWlsZCAtdCBwbGF0Zm9ybS1odWItd2ViIC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgdGFnLCBwdWxsX3JlcXVlc3RdCgogIHdlYl90ZXN0X2ltYWdlOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIHJ1biAtLW5hbWUgcGxhdGZvcm0taHViLXdlYi10ZXN0IHBsYXRmb3JtLWh1Yi13ZWIgL2Jpbi9zaCAtYyAicHdkICYmIGxzIC1sYWggJiYgdGVzdCAtZSBpbmRleC5odG1sIgogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdF0KCiAgd2ViX2xhdGVzdF9pbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3BsYXRmb3JtX2h1YiIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIHBsYXRmb3JtLWh1Yi13ZWIgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi13ZWI6bGF0ZXN0CiAgICAgIC0gZG9ja2VyIHRhZyBwbGF0Zm9ybS1odWItd2ViIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9wbGF0Zm9ybS1odWItd2ViOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKICB3ZWJfdGFnX2ltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrcGxhdGZvcm1faHViIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgcGxhdGZvcm0taHViLXdlYiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX1RBR30KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX1RBR30KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKCgogIGFwaV90ZXN0czoKICAgIGltYWdlOiBydWJ5OjIuMy4zCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBTRUNSRVRfS0VZX0JBU0U9JChoZWFkIC1jMzAgPCAvZGV2L3VyYW5kb20gfCBiYXNlNjQpCiAgICAgIC0gR0lUSFVCX0NMSUVOVF9JRD1OQQogICAgICAtIEdJVEhVQl9DTElFTlRfU0VDUkVUPU5BCiAgICAgIC0gQUdFTlRfR0lUSFVCX1RPS0VOPW5vb3AKICAgICAgLSBBR0VOVF9HSVRIVUJfT1JHPW5vb3AKICAgICAgLSBBR0VOVF9HSVRIVUJfT1JHX01BSU5fVEVBTV9JRD1ub29wCiAgICAgIC0gQVBQX0JBU0VfVVJMPSJodHRwOi8vbG9jYWxob3N0OjMwMDAiCiAgICAgIC0gRU1BSUxfRlJPTV9BRERSRVNTPSJ0ZXN0QGV4YW1wbGUub3JnIgogICAgICAtIEVNQUlMX01BWF9UT19BRERSRVNTRVM9MTAKICAgICAgLSBTTEFDS19XRUJIT09LPW5vb3AKICAgIGNvbW1hbmRzOgogICAgICAtIGVjaG8gImRlYiBodHRwOi8vYXB0LnBvc3RncmVzcWwub3JnL3B1Yi9yZXBvcy9hcHQvIGplc3NpZS1wZ2RnIG1haW4iID4-IC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL3BnZGcubGlzdAogICAgICAtIHdnZXQgLS1xdWlldCAtTyAtIGh0dHBzOi8vd3d3LnBvc3RncmVzcWwub3JnL21lZGlhL2tleXMvQUNDQzRDRjguYXNjIHwgYXB0LWtleSBhZGQgLQogICAgICAtIGFwdC1nZXQgdXBkYXRlICYmIGFwdC1nZXQgaW5zdGFsbCAteSBwb3N0Z3Jlc3FsLWNsaWVudCBsaWJwcS1kZXYKICAgICAgLSBjZCBwbGF0Zm9ybS1odWItYXBpCiAgICAgIC0gYnVuZGxlIGluc3RhbGwgLS1qb2JzIDIwIC0tcmV0cnkgNSAtLWRlcGxveW1lbnQgLS1uby1jYWNoZQogICAgICAtIGJpbi9zZXR1cAogICAgICAtIGJ1bmRsZSBleGVjIHJzcGVjCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZywgcHVsbF9yZXF1ZXN0XQoKICBhcGlfYnVpbGRfaW1hZ2U6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBjZCBwbGF0Zm9ybS1odWItYXBpCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHBsYXRmb3JtLWh1Yi1hcGkgLgogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdF0KCiAgYXBpX3Rlc3RfaW1hZ2U6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSA-CiAgICAgICAgZG9ja2VyIHJ1bgogICAgICAgIC0tbmFtZSBwbGF0Zm9ybS1odWItYXBpLXRlc3QKICAgICAgICAtZSBQT1JUPTMwMDAwCiAgICAgICAgLWUgUEhVQl9EQl9OQU1FPXBodWJfZGV2ZWxvcG1lbnQKICAgICAgICAtZSBQSFVCX0RCX1VTRVJOQU1FPXBodWIKICAgICAgICAtZSBQSFVCX0RCX1BBU1NXT1JEPXBodWJfcGFzc3dvcmQKICAgICAgICAtZSBSQUlMU19MT0dfVE9fU1RET1VUPXRydWUKICAgICAgICAtZSBTRUNSRVRfS0VZX0JBU0U9JChoZWFkIC1jMzAgPCAvZGV2L3VyYW5kb20gfCBiYXNlNjQpCiAgICAgICAgLWUgR0lUSFVCX0NMSUVOVF9JRD1OQQogICAgICAgIC1lIEdJVEhVQl9DTElFTlRfU0VDUkVUPU5BCiAgICAgICAgLWUgQUdFTlRfR0lUSFVCX1RPS0VOPW5vb3AKICAgICAgICAtZSBBR0VOVF9HSVRIVUJfT1JHPW5vb3AKICAgICAgICAtZSBBR0VOVF9HSVRIVUJfT1JHX01BSU5fVEVBTV9JRD1ub29wCiAgICAgICAgLWUgQVBQX0JBU0VfVVJMPSJodHRwOi8vbG9jYWxob3N0OjMwMDAiCiAgICAgICAgLWUgRU1BSUxfRlJPTV9BRERSRVNTPSJ0ZXN0QGV4YW1wbGUub3JnIgogICAgICAgIC1lIEVNQUlMX01BWF9UT19BRERSRVNTRVM9MTAKICAgICAgICAtZSBTTEFDS19XRUJIT09LPW5vb3AKICAgICAgICAtLW5ldD1ob3N0CiAgICAgICAgLWQKICAgICAgICBwbGF0Zm9ybS1odWItYXBpCiAgICAgICAgL2Jpbi9iYXNoIC1sIC1jICJiaW4vcmFpbHMgc2VydmVyIgogICAgICAtIHNsZWVwIDUKICAgICAgLSBjdXJsIC1zIC1mIGh0dHA6Ly8xMjcuMC4wLjE6MzAwMDAvaGVhbHRoegogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdF0KCiAgYXBpX2xhdGVzdF9pbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3BsYXRmb3JtX2h1YiIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIHBsYXRmb3JtLWh1Yi1hcGkgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi1hcGk6bGF0ZXN0CiAgICAgIC0gZG9ja2VyIHRhZyBwbGF0Zm9ybS1odWItYXBpIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9wbGF0Zm9ybS1odWItYXBpOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaTpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaToke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKICBhcGlfdGFnX2ltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrcGxhdGZvcm1faHViIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgcGxhdGZvcm0taHViLWFwaSBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaToke0RST05FX1RBR30KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaToke0RST05FX1RBR30KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKCnNlcnZpY2VzOgoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGNvbW1hbmQ6CiAgICAgIC0gIi1zIgogICAgICAtICJvdmVybGF5IgoKICBwb3N0Z3JlczoKICAgIGltYWdlOiBwb3N0Z3Jlczo5LjYuMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gUE9TVEdSRVNfVVNFUj1waHViCiAgICAgIC0gUE9TVEdSRVNfUEFTU1dPUkQ9cGh1Yl9wYXNzd29yZAo.UFftmHU8xVnBEkmdiEGE9Z8d5HTgJ5Vh9z3AIM9JamI