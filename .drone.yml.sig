eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIHdlYl90ZXN0c190aGVuX2J1aWxkX2Rpc3Q6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL25vZGVqcy1iYXNlOnY2LjkuMQogICAgY29tbWFuZHM6CiAgICAgIC0geXVtIGluc3RhbGwgLXkgZ2l0IGJ6aXAyIGJ6aXAyLWxpYnMgZm9udGNvbmZpZwogICAgICAtIGdpdCBjb25maWcgLS1nbG9iYWwgdXJsLiJodHRwczovLyIuaW5zdGVhZE9mIGdpdDovLwogICAgICAtIG5wbSBpbnN0YWxsIC1nIHlhcm5AMC4yNy41CiAgICAgIC0gY2QgcGxhdGZvcm0taHViLXdlYgogICAgICAtIHJtIC1yZiBub2RlX21vZHVsZXMKICAgICAgLSB5YXJuCiAgICAgIC0geWFybiBydW4gdGVzdAogICAgICAtIHlhcm4gcnVuIGJ1aWxkCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZ10KCiAgIyBFeHBlY3RzIHRoZSBvcHRpbWl6ZWQgZGlzdCBjb2RlIHRvIGhhdmUgYmVlbiBidWlsdAogIHdlYl9idWlsZF9pbWFnZToKICAgIGltYWdlOiBkb2NrZXI6MS4xMgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIHBsYXRmb3JtLWh1Yi13ZWIKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgcGxhdGZvcm0taHViLXdlYiAuCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZ10KCiAgd2ViX3Rlc3RfaW1hZ2U6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgcnVuIC0tbmFtZSBwbGF0Zm9ybS1odWItd2ViLXRlc3QgcGxhdGZvcm0taHViLXdlYiAvYmluL3NoIC1jICJwd2QgJiYgbHMgLWxhaCAmJiB0ZXN0IC1lIGluZGV4Lmh0bWwiCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZ10KCiAgd2ViX2xhdGVzdF9pbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3BsYXRmb3JtX2h1YiIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIHBsYXRmb3JtLWh1Yi13ZWIgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi13ZWI6bGF0ZXN0CiAgICAgIC0gZG9ja2VyIHRhZyBwbGF0Zm9ybS1odWItd2ViIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9wbGF0Zm9ybS1odWItd2ViOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKICB3ZWJfdGFnX2ltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrcGxhdGZvcm1faHViIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgcGxhdGZvcm0taHViLXdlYiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX1RBR30KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX1RBR30KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKCgogIGFwaV90ZXN0czoKICAgIGltYWdlOiBhbHBpbmU6My41CiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBTRUNSRVRfS0VZX0JBU0U9JChoZWFkIC1jMzAgPCAvZGV2L3VyYW5kb20gfCBiYXNlNjQpCiAgICAgIC0gR0lUSFVCX0NMSUVOVF9JRD1OQQogICAgICAtIEdJVEhVQl9DTElFTlRfU0VDUkVUPU5BCiAgICAgIC0gQUdFTlRfR0lUSFVCX1RPS0VOPW5vb3AKICAgICAgLSBBR0VOVF9HSVRIVUJfT1JHPW5vb3AKICAgICAgLSBBR0VOVF9HSVRIVUJfT1JHX01BSU5fVEVBTV9JRD1ub29wCiAgICAgIC0gQVBQX0JBU0VfVVJMPSJodHRwOi8vbG9jYWxob3N0OjMwMDAiCiAgICAgIC0gRU1BSUxfRlJPTV9BRERSRVNTPSJ0ZXN0QGV4YW1wbGUub3JnIgogICAgICAtIEVNQUlMX01BWF9UT19BRERSRVNTRVM9MTAKICAgICAgLSBTTEFDS19XRUJIT09LPW5vb3AKICAgIGNvbW1hbmRzOgogICAgICAtIGFwayB1cGRhdGUgJiYgYXBrIHVwZ3JhZGUKICAgICAgLSBhcGsgLS11cGRhdGUgYWRkIHJ1YnkgcnVieS1kZXYgcnVieS1pby1jb25zb2xlIHJ1YnktanNvbiBydWJ5LWJpZ2RlY2ltYWwgdHpkYXRhCiAgICAgIC0gYXBrIC0tdXBkYXRlIGFkZCBwb3N0Z3Jlc3FsLWNsaWVudCBwb3N0Z3Jlc3FsLWRldiBidWlsZC1iYXNlIGxpYnhtbDItZGV2IGxpYnhzbHQtZGV2IGxpYmZmaS1kZXYKICAgICAgLSBnZW0gaW5zdGFsbCBidW5kbGVyIC0tbm8tcmkgLS1uby1yZG9jCiAgICAgIC0gY2QgcGxhdGZvcm0taHViLWFwaQogICAgICAtIGJ1bmRsZSBpbnN0YWxsIC0tam9icyAyMCAtLXJldHJ5IDUgLS1kZXBsb3ltZW50IC0tbm8tY2FjaGUKICAgICAgLSBiaW4vc2V0dXAKICAgICAgLSBidW5kbGUgZXhlYyByc3BlYwogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWddCgogIGFwaV9idWlsZF9pbWFnZToKICAgIGltYWdlOiBkb2NrZXI6MS4xMgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIHBsYXRmb3JtLWh1Yi1hcGkKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgcGxhdGZvcm0taHViLWFwaSAuCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZ10KCiAgYXBpX3Rlc3RfaW1hZ2U6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSA-CiAgICAgICAgZG9ja2VyIHJ1bgogICAgICAgIC0tbmFtZSBwbGF0Zm9ybS1odWItYXBpLXRlc3QKICAgICAgICAtZSBQT1JUPTMwMDAwCiAgICAgICAgLWUgUEhVQl9EQl9OQU1FPXBodWJfZGV2ZWxvcG1lbnQKICAgICAgICAtZSBQSFVCX0RCX1VTRVJOQU1FPXBodWIKICAgICAgICAtZSBQSFVCX0RCX1BBU1NXT1JEPXBodWJfcGFzc3dvcmQKICAgICAgICAtZSBSQUlMU19MT0dfVE9fU1RET1VUPXRydWUKICAgICAgICAtZSBTRUNSRVRfS0VZX0JBU0U9JChoZWFkIC1jMzAgPCAvZGV2L3VyYW5kb20gfCBiYXNlNjQpCiAgICAgICAgLWUgR0lUSFVCX0NMSUVOVF9JRD1OQQogICAgICAgIC1lIEdJVEhVQl9DTElFTlRfU0VDUkVUPU5BCiAgICAgICAgLWUgQUdFTlRfR0lUSFVCX1RPS0VOPW5vb3AKICAgICAgICAtZSBBR0VOVF9HSVRIVUJfT1JHPW5vb3AKICAgICAgICAtZSBBR0VOVF9HSVRIVUJfT1JHX01BSU5fVEVBTV9JRD1ub29wCiAgICAgICAgLWUgQVBQX0JBU0VfVVJMPSJodHRwOi8vbG9jYWxob3N0OjMwMDAiCiAgICAgICAgLWUgRU1BSUxfRlJPTV9BRERSRVNTPSJ0ZXN0QGV4YW1wbGUub3JnIgogICAgICAgIC1lIEVNQUlMX01BWF9UT19BRERSRVNTRVM9MTAKICAgICAgICAtZSBTTEFDS19XRUJIT09LPW5vb3AKICAgICAgICAtLW5ldD1ob3N0CiAgICAgICAgLWQKICAgICAgICBwbGF0Zm9ybS1odWItYXBpCiAgICAgICAgYmluL3JhaWxzIHNlcnZlcgogICAgICAtIHNsZWVwIDUKICAgICAgLSBjdXJsIC1zIC1mIGh0dHA6Ly8xMjcuMC4wLjE6MzAwMDAvaGVhbHRoegogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWddCgogIGFwaV9sYXRlc3RfaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtwbGF0Zm9ybV9odWIiIC1wPSR7RE9DS0VSX1BBU1NXT1JEfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIHRhZyBwbGF0Zm9ybS1odWItYXBpIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9wbGF0Zm9ybS1odWItYXBpOmxhdGVzdAogICAgICAtIGRvY2tlciB0YWcgcGxhdGZvcm0taHViLWFwaSBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaToke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi1hcGk6bGF0ZXN0CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi1hcGk6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgYXBpX3RhZ19pbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3BsYXRmb3JtX2h1YiIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIHBsYXRmb3JtLWh1Yi1hcGkgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi1hcGk6JHtEUk9ORV9UQUd9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi1hcGk6JHtEUk9ORV9UQUd9CiAgICB3aGVuOgogICAgICBldmVudDogdGFnCgpzZXJ2aWNlczoKCiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMi1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIKCiAgcG9zdGdyZXM6CiAgICBpbWFnZTogcG9zdGdyZXM6OS42LjEKICAgIGVudmlyb25tZW50OgogICAgICAtIFBPU1RHUkVTX1VTRVI9cGh1YgogICAgICAtIFBPU1RHUkVTX1BBU1NXT1JEPXBodWJfcGFzc3dvcmQK.gUAu_JgT2qoEZQael2_bktR8UDo4hMnuI3-TmOkhEfQ