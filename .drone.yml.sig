eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIHdlYl90ZXN0c190aGVuX2J1aWxkX2Rpc3Q6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL25vZGVqcy1iYXNlOnY2LjkuMQogICAgY29tbWFuZHM6CiAgICAgIC0geXVtIGluc3RhbGwgLXkgZ2l0IGJ6aXAyIGJ6aXAyLWxpYnMgZm9udGNvbmZpZwogICAgICAtIGdpdCBjb25maWcgLS1nbG9iYWwgdXJsLiJodHRwczovLyIuaW5zdGVhZE9mIGdpdDovLwogICAgICAtIG5wbSBpbnN0YWxsIC1nIHlhcm5AMC4yMC4zCiAgICAgIC0gY2QgcGxhdGZvcm0taHViLXdlYgogICAgICAtIHJtIC1yZiBub2RlX21vZHVsZXMKICAgICAgLSB5YXJuCiAgICAgIC0geWFybiBydW4gdGVzdAogICAgICAtIHlhcm4gcnVuIGJ1aWxkCiAgICB3aGVuOgogICAgICBldmVudDogW3B1c2gsIHRhZywgcHVsbF9yZXF1ZXN0XQoKICAjIEV4cGVjdHMgdGhlIG9wdGltaXplZCBkaXN0IGNvZGUgdG8gaGF2ZSBiZWVuIGJ1aWx0CiAgd2ViX2J1aWxkX2ltYWdlOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgcGxhdGZvcm0taHViLXdlYgogICAgICAtIGRvY2tlciBidWlsZCAtdCBwbGF0Zm9ybS1odWItd2ViIC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgdGFnLCBwdWxsX3JlcXVlc3RdCgogIHdlYl90ZXN0X2ltYWdlOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIHJ1biAtLW5hbWUgcGxhdGZvcm0taHViLXdlYi10ZXN0IHBsYXRmb3JtLWh1Yi13ZWIgL2Jpbi9zaCAtYyAicHdkICYmIGxzIC1sYWggJiYgdGVzdCAtZSBpbmRleC5odG1sIgogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdF0KCiAgd2ViX2xhdGVzdF9pbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3BsYXRmb3JtX2h1YiIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIHBsYXRmb3JtLWh1Yi13ZWIgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi13ZWI6bGF0ZXN0CiAgICAgIC0gZG9ja2VyIHRhZyBwbGF0Zm9ybS1odWItd2ViIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9wbGF0Zm9ybS1odWItd2ViOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKICB3ZWJfdGFnX2ltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrcGxhdGZvcm1faHViIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgcGxhdGZvcm0taHViLXdlYiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX1RBR30KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLXdlYjoke0RST05FX1RBR30KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKCgogIGFwaV90ZXN0czoKICAgIGltYWdlOiBydWJ5OjIuMy4zCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBTRUNSRVRfS0VZX0JBU0U9Zm9vYmFyCiAgICAgIC0gR0lUSFVCX0NMSUVOVF9JRD1OQQogICAgICAtIEdJVEhVQl9DTElFTlRfU0VDUkVUPU5BCiAgICAgIC0gQUdFTlRfR0lUSFVCX1RPS0VOPW5vb3AKICAgICAgLSBBR0VOVF9HSVRIVUJfT1JHPW5vb3AKICAgICAgLSBBR0VOVF9HSVRIVUJfT1JHX01BSU5fVEVBTV9JRD1ub29wCiAgICAgIC0gQVBQX0JBU0VfVVJMPSJodHRwOi8vbG9jYWxob3N0OjMwMDAiCiAgICBjb21tYW5kczoKICAgICAgLSBlY2hvICJkZWIgaHR0cDovL2FwdC5wb3N0Z3Jlc3FsLm9yZy9wdWIvcmVwb3MvYXB0LyBqZXNzaWUtcGdkZyBtYWluIiA-PiAvZXRjL2FwdC9zb3VyY2VzLmxpc3QuZC9wZ2RnLmxpc3QKICAgICAgLSB3Z2V0IC0tcXVpZXQgLU8gLSBodHRwczovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9tZWRpYS9rZXlzL0FDQ0M0Q0Y4LmFzYyB8IGFwdC1rZXkgYWRkIC0KICAgICAgLSBhcHQtZ2V0IHVwZGF0ZSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgcG9zdGdyZXNxbC1jbGllbnQgbGlicHEtZGV2CiAgICAgIC0gY2QgcGxhdGZvcm0taHViLWFwaQogICAgICAtIGJ1bmRsZSBpbnN0YWxsIC0tam9icyAyMCAtLXJldHJ5IDUgLS1kZXBsb3ltZW50IC0tbm8tY2FjaGUKICAgICAgLSBiaW4vc2V0dXAKICAgICAgLSBidW5kbGUgZXhlYyByc3BlYwogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdF0KCiAgYXBpX2J1aWxkX2ltYWdlOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgcGxhdGZvcm0taHViLWFwaQogICAgICAtIGRvY2tlciBidWlsZCAtdCBwbGF0Zm9ybS1odWItYXBpIC4KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgdGFnLCBwdWxsX3JlcXVlc3RdCgogIGFwaV90ZXN0X2ltYWdlOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gPgogICAgICAgIGRvY2tlciBydW4KICAgICAgICAtLW5hbWUgcGxhdGZvcm0taHViLWFwaS10ZXN0CiAgICAgICAgLWUgUE9SVD0zMDAwMAogICAgICAgIC1lIFBIVUJfREJfTkFNRT1waHViX2RldmVsb3BtZW50CiAgICAgICAgLWUgUEhVQl9EQl9VU0VSTkFNRT1waHViCiAgICAgICAgLWUgUEhVQl9EQl9QQVNTV09SRD1waHViX3Bhc3N3b3JkCiAgICAgICAgLWUgUkFJTFNfTE9HX1RPX1NURE9VVD10cnVlCiAgICAgICAgLWUgU0VDUkVUX0tFWV9CQVNFPWZvb2JhcgogICAgICAgIC1lIEdJVEhVQl9DTElFTlRfSUQ9TkEKICAgICAgICAtZSBHSVRIVUJfQ0xJRU5UX1NFQ1JFVD1OQQogICAgICAgIC1lIEFHRU5UX0dJVEhVQl9UT0tFTj1ub29wCiAgICAgICAgLWUgQUdFTlRfR0lUSFVCX09SRz1ub29wCiAgICAgICAgLWUgQUdFTlRfR0lUSFVCX09SR19NQUlOX1RFQU1fSUQ9bm9vcAogICAgICAgIC1lIEFQUF9CQVNFX1VSTD0iaHR0cDovL2xvY2FsaG9zdDozMDAwIgogICAgICAgIC0tbmV0PWhvc3QKICAgICAgICAtZAogICAgICAgIHBsYXRmb3JtLWh1Yi1hcGkKICAgICAgICAvYmluL3NoIC1jICJiaW4vcmFpbHMgc2VydmVyIgogICAgICAtIHNsZWVwIDUKICAgICAgLSBjdXJsIC1zIC1mIGh0dHA6Ly8xMjcuMC4wLjE6MzAwMDAvaGVhbHRoegogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdF0KCiAgYXBpX2xhdGVzdF9pbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3BsYXRmb3JtX2h1YiIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIHBsYXRmb3JtLWh1Yi1hcGkgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3BsYXRmb3JtLWh1Yi1hcGk6bGF0ZXN0CiAgICAgIC0gZG9ja2VyIHRhZyBwbGF0Zm9ybS1odWItYXBpIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9wbGF0Zm9ybS1odWItYXBpOiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaTpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaToke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKICBhcGlfdGFnX2ltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrcGxhdGZvcm1faHViIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgcGxhdGZvcm0taHViLWFwaSBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaToke0RST05FX1RBR30KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcGxhdGZvcm0taHViLWFwaToke0RST05FX1RBR30KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKCnNlcnZpY2VzOgoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGNvbW1hbmQ6CiAgICAgIC0gIi1zIgogICAgICAtICJvdmVybGF5IgoKICBwb3N0Z3JlczoKICAgIGltYWdlOiBwb3N0Z3Jlczo5LjYuMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gUE9TVEdSRVNfVVNFUj1waHViCiAgICAgIC0gUE9TVEdSRVNfUEFTU1dPUkQ9cGh1Yl9wYXNzd29yZAo.t_UNpqo0SRCBSfkmBhhZQEOn4lPzvLpyTno4G8C-Qr4